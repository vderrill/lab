<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:workflow xmlns:ns2="http://vmware.com/vco/workflow" root-name="item4" object-name="workflow:name=generic" id="b49f5c78-f6f3-45f9-aa0d-400d318d1288" editor-version="2.0" version="2.1.0" api-version="6.0.0" allowed-operations="evf" restartMode="1" resumeFromFailedMode="0">
    <display-name>Virtua-Multi Customized Hostname</display-name>
    <position y="50.0" x="100.0"/>
    <input>
        <param name="inputProperties" type="Properties"/>
    </input>
    <output>
        <param name="resourceNames" type="Array/string"/>
    </output>
    <attrib name="numberOfDigits" type="number" conf-id="3af399d6-9cfa-43e8-b91e-77acac10e36c" conf-key="numberOfDigits">
        <description>* read from Configuration page</description>
    </attrib>
    <attrib name="startingSequential" type="number" conf-id="3af399d6-9cfa-43e8-b91e-77acac10e36c" conf-key="startingSequential">
        <description>* read from Configuration page</description>
    </attrib>
    <attrib name="changeCase" type="number" conf-id="3af399d6-9cfa-43e8-b91e-77acac10e36c" conf-key="changeCase">
        <description>* read from Configuration page</description>
    </attrib>
    <attrib name="resourceNamesCount" type="number">
        <value encoded="n"/>
    </attrib>
    <attrib name="computerNamesArray" type="Array/string">
        <value encoded="n">[]</value>
    </attrib>
    <attrib name="applicationName" type="string">
        <value encoded="n"></value>
    </attrib>
    <attrib name="enviro" type="string">
        <value encoded="n"></value>
    </attrib>
    <attrib name="name" type="string">
        <value encoded="n"></value>
    </attrib>
    <attrib name="computerName" type="string">
        <value encoded="n"></value>
    </attrib>
    <attrib name="functionName" type="string">
        <value encoded="n"></value>
    </attrib>
    <workflow-item name="item0" type="end" end-mode="0" comparator="0">
        <in-binding/>
        <out-binding/>
        <position y="50.0" x="551.0"/>
    </workflow-item>
    <workflow-item name="item1" out-name="item0" type="task" comparator="0">
        <display-name>Return name to vRA</display-name>
        <script encoded="false">// var names = inputProperties.get("resourceNames");
resourceNames = [];
resourceNames = computerNamesArray
</script>
        <in-binding>
            <bind name="inputProperties" type="Properties" export-name="inputProperties"/>
            <bind name="computerName" type="string" export-name="computerName"/>
            <bind name="computerNamesArray" type="Array/string" export-name="computerNamesArray"/>
        </in-binding>
        <out-binding>
            <bind name="resourceNames" type="Array/string" export-name="resourceNames"/>
        </out-binding>
        <description>Simple task with custom script capability.</description>
        <position y="60.0" x="380.0"/>
    </workflow-item>
    <workflow-item name="item3" out-name="item1" type="task" comparator="0">
        <display-name>Generate name</display-name>
        <script encoded="false">computerNamesArray = [];
var partOne;
for (n = 0; n &lt; resourceNamesCount; n++) {

retries = 0;
do {
    // Generating a hostname consists of the letters in front (partOne), 
    // and the numbers at the end (partTwo). First determine the letters
    System.log('Generating custom naming template');
    partOne =applicationName + '-' + functionName; 
    if (enviro.toUpperCase != 'P') partOne = partOne + '-' + enviro


    // Work on partTwo, the sequential
    // Put placeholder 'X'; in the middle as per numberOfDigits (for the yet unknown partTwo) to create the template
    hash = ''
    for (i=0; i &lt; numberOfDigits; i++) hash += 'X';
    template = partOne + hash 
    System.log('Hostname will be in the format ' + template);

    // Now that we have our template, check in Orchestrator 'Configurations' to find the history of this template
    System.log('Checking Configuration Elements to see if we used ' + template + ' before and if so what was the last sequential');
    System.log('If not found then we will create a new entry for this template and use starting number ' + startingSequential);
    // Get a link to the Configuration repository
    categoryList = Server.getAllConfigurationElementCategories();
    System.log("The category list is " + categoryList.length + " long.");
    category = Server.getConfigurationElementCategoryWithPath('Library/derrill')
    elementList = category.configurationElements
    System.log('There are ' + elementList.length + ' elements.')

    // In the repository find out list of previous naming templates
    for (j in elementList) {
        if (elementList[j].name == 'Multi Server Naming List') {
            System.log('Found the naming list Configuration Element')
            targetElement = elementList[j]
            break
        }
    }
    if (typeof targetElement == 'undefined') { // If not found, create the Configuration Element
        System.warn('Could not find a vRO configuration called Multi Server Naming List');
        System.warn('Creating one now');
        Server.createConfigurationElement('Library/derrill','Multi Server Naming List');
    }
    // Get our template out of the Configuration Element
    targetSequence = targetElement.getAttributeWithKey(template);
    if (targetSequence != null ) {
        sequential = targetSequence.value;
        sequential++;  // Increment the sequence #
        if (sequential.toString().length &gt; numberOfDigits) sequential = startingSequential // sequential rollover 
        System.log('This sequence was used before, will be using the next sequential ' + sequential);
    } else {
        System.log('This hostname pattern was not used before. Will use the starting sequential of ' + startingSequential);
        sequential = startingSequential;
    }
    // Store the new sequential for the next time this is run
    targetElement.setAttributeWithKey(template, sequential, 'number');

    // Now that we have the sequential for partTwo, pad it with leading zeros to get the correct length
    partTwo = sequential.toString();
    // while (partTwo.length &lt; numberOfDigits) partTwo = '0' + partTwo;
    System.log('Numerical value was calculated to be ' + partTwo);

    // Now put all the pieces togther to make the new hostname
    computerName = (partOne + partTwo);
    System.log('Generated computerName for server ' + n + ' is ' + computerName);

    // Check if there's duplicates in AD, vCenter, and DNS
    duplicate = 0;
    // First check Active Directory
    checkAD = ActiveDirectory.getComputerAD(computerName)
    if ( checkAD != null ) {
        duplicate++;
        System.warn('Found duplicate hostname in Active Directory: ' + computerName);
    } else {
        System.log('No duplicate found in Active Directory');
    }
// Next check vCenter
    checkvCenter = VcPlugin.getAllVirtualMachines(null, computerName)
    if (checkvCenter.length &gt; 0) {
        duplicate++;
        System.log('Length: ' + checkvCenter.length);
        System.warn('Found duplicate hostname in vCenter: ' + computerName);
    } else {
        System.log('No duplicate found in vCenter');
    }
    // Next check DNS
    checkDNS = System.resolveHostName(computerName);
    if (checkDNS != null ) {
        duplicate++;
        System.warn('Found duplicate hostname in DNS: ' + computerName);
    } else {
        System.log('No duplicate found in DNS');
    }
    if (duplicate &gt; 0) retries++;
    }



while (duplicate&gt;0 &amp;&amp; retries &lt; 5 );

if (retries &gt; 4) throw('Error could not find a unique hostname after 5 tries'); else retries = 0;
computerNamesArray[n] = computerName.toLowerCase();

}


</script>
        <in-binding>
            <bind name="numberOfDigits" type="number" export-name="numberOfDigits"/>
            <bind name="startingSequential" type="number" export-name="startingSequential"/>
            <bind name="resourceNamesCount" type="number" export-name="resourceNamesCount"/>
            <bind name="name" type="string" export-name="name"/>
            <bind name="applicationName" type="string" export-name="applicationName"/>
            <bind name="enviro" type="string" export-name="enviro"/>
            <bind name="functionName" type="string" export-name="functionName"/>
        </in-binding>
        <out-binding>
            <bind name="computerName" type="string" export-name="computerName"/>
            <bind name="computerNamesArray" type="Array/string" export-name="computerNamesArray"/>
        </out-binding>
        <description>Generates the actual name to be used</description>
        <position y="60.0" x="260.0"/>
    </workflow-item>
    <workflow-item name="item4" out-name="item3" type="task" comparator="0">
        <display-name>Get data from vRA</display-name>
        <script encoded="false">var customProps = inputProperties.get("customProperties")
var name = customProps.get("name");
enviro = customProps.get("Environment");
functionName = customProps.get("ServerFunction");
applicationName = customProps.get("ApplicationName");

resourceNamesCount = (inputProperties.resourceNames).length;

System.log('For this naming request there are ' + resourceNamesCount + ' VMs');
System.log("----- START CREATE HOSTNAME WORKFLOW ----");
System.log("Creating hostname for " + name);
System.log('   Environment is ' + enviro);
System.log('   Function Name is ' + functionName);
System.log('   Application Name is ' + applicationName);


</script>
        <in-binding>
            <bind name="inputProperties" type="Properties" export-name="inputProperties"/>
        </in-binding>
        <out-binding>
            <bind name="resourceNamesCount" type="number" export-name="resourceNamesCount"/>
            <bind name="name" type="string" export-name="name"/>
            <bind name="applicationName" type="string" export-name="applicationName"/>
            <bind name="enviro" type="string" export-name="enviro"/>
            <bind name="functionName" type="string" export-name="functionName"/>
        </out-binding>
        <description>Simple task with custom script capability.</description>
        <position y="60.0" x="160.0"/>
    </workflow-item>
    <presentation/>
</ns2:workflow>
